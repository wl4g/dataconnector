plugins {
    id 'java'
    id "me.champeau.jmh" version "0.7.0"
}

description = "Kafka Subscriber Core"

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-actuator-autoconfigure'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-jmx'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.2'
    implementation "org.springframework.kafka:spring-kafka"
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    compileOnly 'org.projectlombok:lombok:1.18.24'
    implementation "io.swagger.core.v3:swagger-annotations:2.2.2"
    implementation "com.wl4g:infra-common:3.1.26"
    implementation 'com.googlecode.aviator:aviator:5.3.1'
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation("junit:junit")
    testImplementation 'org.testcontainers:testcontainers:1.16.0'
    testImplementation 'org.testcontainers:kafka:1.16.0'
}

jmh {
    warmupIterations = 5
    iterations = 5
    fork = 1
    failOnError = true
    jvmArgs = ['-Xms1G', '-Xmx1G', '-XX:+UseG1GC']
    profilers = ['gc', 'stack']
    resultsFile = project.file("${project.buildDir}/reports/jmh/results.json")
    resultFormat = 'JSON'
}

sourceSets {
    test {
        java {
            srcDirs 'src/it/java'
        }
        resources {
            srcDirs 'src/it/resources'
        }
    }
}
