# Copyright (c) 2017 ~ 2025, the original author James Wong individual Inc,
# All rights reserved. Contact us <jameswong1376@gmail.com>
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# #### Environment Base configuration. ####
#

spring:
  application.name: kafka-subscriber
  main:
    allow-circular-references: true

server:
  port: 8000
  servlet:
    contextPath: /

management:
  server:
    address: 0.0.0.0
    port: 10108
    ssl:
      enabled: false
    servlet.contextPath: /
  security:
    enabled: false
    sensitive: true
  metrics:
    export:
      prometheus:
        enabled: true
      jmx:
        enabled: true
  endpoints:
    web:
      basePath: /actuator
      exposure:
        include: '*'

kafka-subscriber:
  definitions:
    bases:
      consumerProps: &baseConsumerProps
        request.timeout.ms: 30000
        auto.offset.reset: earliest
      executorProps: &baseExecutorProps
        sharedExecutorThreadPoolSize: 50
        sharedExecutorQueueSize: 500
        sequenceExecutorsMaxCountLimit: 10
        sequenceExecutorsPerQueueSize: 100
        executorWarmUp: true

    sources:
      - !STATIC
        name: defaultStaticSourceProvider # Custom source provider bean name
        staticConfigs:
          - name: kafka01
            topicPattern: "test-input"
            parallelism: 2
            matchToSubscriberUpdateDelayTime: 3
            consumerProps:
              bootstrap.servers: ${IT_KAFKA_SERVERS:localhost:9092}
              group.id: "test_shared_source_101"
              <<: *baseConsumerProps
          - name: kafka02
            topicPattern: "test-input"
            parallelism: 2
            matchToSubscriberUpdateDelayTime: 3
            consumerProps:
              bootstrap.servers: ${IT_KAFKA_SERVERS:localhost:9092}
              group.id: "test_shared_source_102"
              <<: *baseConsumerProps
      #- !JDBC
      #  name: jdbcSourceProvider # The example custom JDBC source provider.
      #  jdbcConfig:
      #    jdbcUrl:
      #    username:
      #    password:
      #    sql:

    filters:
      - !EXPRESSION_MATCH
        name: defaultSubscribeFilter # Custom subscribe filter bean name
        filterConfig:
          topicPrefix: "test_shared_filtered_"
          topicPartitions: 10
          replicationFactor: 1
          executorProps:
            <<: *baseExecutorProps
          checkpoint:
            # TODO support directly parse to Enum
            qosType: 3 # 0:AT_MOST_ONCE|1:RETRIES_AT_MOST|2:RETRIES_AT_MOST_STRICTLY|3:STRICTLY
            qoSMaxRetries: 5
            qoSMaxRetriesTimeout: 1800000 # 30min
            producerMaxCountLimit: 100
            producerProps:
              #bootstrap.servers: ${IT_KAFKA_SERVERS:localhost:9092} # By default: {.source.consumerProps.'bootstrap.servers'}
              acks: "0"
              request.timeout.ms: 30000
              max.request.size: 1048576
              send.buffer.bytes: 131072
              retries: 5
              retry.backoff.ms: 6000
              compression.type: gzip
            defaultTopicProps:
              cleanup.policy: "delete"
              retention.ms: 86400000 # By default: 1day
              retention.bytes: 1073741824 # By default: 1G

    sinks:
      - !PRINT
        name: defaultSubscribeSink # Custom subscribe sink bean name
        sinkConfig:
          groupIdPrefix: "test_isolation_sink_"
          parallelism: 2
          executorProps:
            <<: *baseExecutorProps
          consumerProps:
            bootstrap.servers: ${IT_KAFKA_SERVERS:localhost:9092}
            group.id: "test_shared_source_101"
            <<: *baseConsumerProps

    ## Notice: The following configuration method is usually used in experimental scenarios to
    ## define the subscriber list. When integrating into actual business applications, the interface
    ## 'com.wl4g.kafkasubscriber.facade.SubscribeFacade' should be customized to get subscribers info from the DB.
    subscribers:
      - id: s1001
        name: "subscriber_1"
        tenantId: t1001
        enable: true
        settings:
          isSequence: false
          logRetentionTime: 1d
          logRetentionSize: 1GB
          properties:
            defaultSubscribeFilter: '{"type":"RELATION","name":"testCondition1","fn":{"expression":"cts > 1690345000000 && __properties__.__online__.connected == true"}}'
      - id: s1002
        name: "subscriber_2"
        tenantId: t1002
        enable: true
        settings:
          isSequence: false
          logRetentionTime: 1d
          logRetentionSize: 1GB
          properties:
            defaultSubscribeFilter: '{"type":"RELATION","name":"testCondition1","fn":{"expression":"cts > 1690345000000 && __properties__.__online__.connected == true"}}'
      - id: s1003
        name: "subscriber_3"
        tenantId: t1003
        enable: true
        settings:
          isSequence: false
          logRetentionTime: 1d
          logRetentionSize: 1GB
          properties:
            defaultSubscribeFilter: '{"type":"RELATION","name":"testCondition1","fn":{"expression":"cts > 1690345000000 && __properties__.__online__.connected == true"}}'

    tenants:
      - id: t1001
        name: "tenant_1"
        sourceName: kafka01
        enable: true
        properties: {}
      - id: t1002
        name: "tenant_2"
        sourceName: kafka01
        enable: true
        properties: {}
      - id: t1003
        name: "tenant_3"
        sourceName: kafka03
        enable: true
        properties: {}

  pipelines:
    - name: defaultPipeline
      enable: true # By default: true
      source: defaultStaticSourceProvider
      filter: defaultSubscribeFilter
      sink: defaultSubscribeSink
